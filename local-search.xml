<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我的第一篇blog</title>
    <link href="/2023/04/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog/"/>
    <url>/2023/04/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 简介</title>
    <link href="/2023/04/17/Git/"/>
    <url>/2023/04/17/Git/</url>
    
    <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p><a href="https://blog.csdn.net/Augenstern_QXL/article/details/120088445">(118条消息) ❤️Git图文使用教程详解(一)_生命是有光的的博客-CSDN博客</a></p><ul><li>Git是一个免费的、开源的分布式版本控制系统 ，可以快速高效地处理从小型到大型的各种项目</li><li>Git易于学习，占地面积小，性能 极快 。 它具有廉价的本地 库 ，方便的暂存区域和多个工作<br>  流分支等特性。 其性能优于 Subversion、 CVS、 Perforce和 ClearCase等 版本控制工具。</li></ul><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul><li>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。</li><li>版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换</li></ul><h3 id="1-集中式版本控制工具"><a href="#1-集中式版本控制工具" class="headerlink" title="1. 集中式版本控制工具"></a>1. 集中式版本控制工具</h3><ul><li>CVS、SVN、VSS</li><li>集中化的版本控制系统诸如 CVS、SVN 等，都有一个<strong>单一的集中管理的服务器</strong>，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。</li><li>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。</li><li>事分两面，有好有坏。这么做显而易见的<strong>缺点是中央服务器的单点故障</strong>。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。</li></ul><h3 id="2-分布式版本控制工具"><a href="#2-分布式版本控制工具" class="headerlink" title="2.分布式版本控制工具"></a>2.分布式版本控制工具</h3><ul><li><p>Git、Mercurial、…</p></li><li><p>像Git这种分布式版本控制工具 ，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来 (本地库) 。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份 。</p><p>  <strong>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷 :</strong></p></li><li><p>服务器断网的情况下也可以进行开发，因为<strong>版本控制是在本地进行的</strong></p></li><li><p><strong>每个客户端保存的也都是整个完整的项目 ，包含历史记录，更加安全</strong></p></li></ul><h2 id="Git历史"><a href="#Git历史" class="headerlink" title="Git历史"></a>Git历史</h2><p><img src="https://img-blog.csdnimg.cn/7cac8b8e331e4fe8b2cde33f3da49c39.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img"></p><h2 id="Git工作机制"><a href="#Git工作机制" class="headerlink" title="Git工作机制"></a>Git工作机制</h2><img src="https://img-blog.csdnimg.cn/2028a2a3904e4e668e65db7c5ae2ae20.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img" style="zoom:67%;" /><ul><li><p>工作区：指代码存放的位置（在本地电脑上的位置）</p></li><li><p>工作区写的代码会先<strong>添加（git add）</strong>到暂存区（暂存区中的代码也是可以删掉的，并且不会产生历史记录），如果想产生历史版本，则需要<strong>提交 ( git commit )</strong> 到 本地库 ,到本地库就删不掉了（因为保存了历史版本）</p></li></ul><h2 id="代码托管中心"><a href="#代码托管中心" class="headerlink" title="代码托管中心"></a>代码托管中心</h2><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为远程库</p><img src="C:%5CUsers%5C%E8%AE%B8%E4%BA%9A%E5%9D%A4%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220701105738573.png" alt="image-20220701105738573" style="zoom:50%;" /><h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><p><img src="C:%5CUsers%5C%E8%AE%B8%E4%BA%9A%E5%9D%A4%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220701110507131.png" alt="image-20220701110507131"></p><p><strong>版本穿梭命令：git reset –hard 版本号</strong></p><p>**git rm –cached <file>**：删除暂存区的代码命令</p><ul><li>在本地如果有修改，追踪文件状态则显示红色</li><li>如果添加到暂存区则显示绿色</li></ul><p><strong>git log:</strong> 查看完整的git历史记录</p><ul><li><code>git reflog</code> 查看版本信息，简略的版本信息，<strong>版本号为完整版本号的前7位</strong></li><li><code>git log</code> 查看版本详细信息，<strong>有完整的版本号等信息</strong></li></ul><h2 id="版本穿梭原理"><a href="#版本穿梭原理" class="headerlink" title="版本穿梭原理"></a>版本穿梭原理</h2><ul><li>Git 切换版本，底层其实是移动的HEAD 指针，具体原理如下图所示</li><li>HEAD 指针指向 master 分支，master分支指向具体哪个版本</li></ul><img src="https://img-blog.csdnimg.cn/7c0455e5ef1a4e17b34d9005570ed7d9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img" style="zoom: 33%;" /><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><h3 id="1-分支概念"><a href="#1-分支概念" class="headerlink" title="1. 分支概念"></a>1. 分支概念</h3><ul><li>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支</li><li>使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行</li><li>分支可以简单理解为副本，一个分支就是一个单独的副本</li></ul><h3 id="2-分支好处"><a href="#2-分支好处" class="headerlink" title="2. 分支好处"></a>2. 分支好处</h3><ul><li>同时并行推进多个功能开发，提高开发效率</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可</li></ul><h3 id="3-分支相关命令"><a href="#3-分支相关命令" class="headerlink" title="3. 分支相关命令"></a>3. 分支相关命令</h3><p><img src="C:%5CUsers%5C%E8%AE%B8%E4%BA%9A%E5%9D%A4%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220701131018287.png" alt="image-20220701131018287"></p><h4 id="1-合并分支"><a href="#1-合并分支" class="headerlink" title="1. 合并分支"></a>1. 合并分支</h4><ul><li>正常合并不冲突</li><li>合并产生冲突</li></ul><p><strong>原因：</strong>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改， Git无法替我们决定使用哪一个。必须 人为决定新代码内容</p><p><code>注意：</code></p><ul><li>如果产生了合并冲突，则需要手动的打开文件，人为的决定需要保留哪些内容，<strong>编辑有冲突的文件，删除特殊符号，决定要使用的内容</strong></li><li>此时的状态仍然为红色（修改），此时还需要调加到暂存区，然后提交本地库（此时提交本地库时不能带文件名）</li></ul><h2 id="Git团队协作"><a href="#Git团队协作" class="headerlink" title="Git团队协作"></a>Git团队协作</h2><ul><li><strong>团队内协作</strong></li></ul><img src="https://img-blog.csdnimg.cn/a402d0b03e894544880540870b6f5401.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img" style="zoom: 50%;" /><ul><li><strong>跨团队协作</strong></li></ul><img src="https://img-blog.csdnimg.cn/9e4f54206fb64cc0af4ca2536bf2037f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img" style="zoom:50%;" /><h2 id="Git远程库"><a href="#Git远程库" class="headerlink" title="Git远程库"></a>Git远程库</h2><ul><li><strong>常用命令</strong></li></ul><p><img src="C:%5CUsers%5C%E8%AE%B8%E4%BA%9A%E5%9D%A4%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220701135336712.png" alt="image-20220701135336712"></p><ul><li>推送的时候需要指定分支（推送和拉取时，本地库和远程库的库名可以不一致，只保证库中内容上的一致性）</li><li>克隆时，只需要在本都创建一个文件夹用于保存远程库的内容即可，不用本地初始化仓库（克隆时不用登录账号）</li><li>克隆时所做的事：1.拉取远程库 2.初始化本地仓库 3.创建好远程别名</li></ul><h2 id="IDEA操作Git"><a href="#IDEA操作Git" class="headerlink" title="IDEA操作Git"></a>IDEA操作Git</h2><p><a href="https://blog.csdn.net/Augenstern_QXL/article/details/120110816?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-120110816-blog-120088567.pc_relevant_multi_platform_whitelistv1&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-120110816-blog-120088567.pc_relevant_multi_platform_whitelistv1&utm_relevant_index=1">(118条消息) ❤️Git图文使用教程详解(三)_生命是有光的的博客-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/17/hello-world/"/>
    <url>/2023/04/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
